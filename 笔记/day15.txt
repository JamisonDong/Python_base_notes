day14回顾：

异常 exception
	错误是引起异常的原因
	异常是错误发生时的一种状态
异常的四条语句：
	try-except语句:
		捕获异常
	try-finally语句：
		执行必须要执行的语句(无论是正常还是异常状态)
	raise 语句
		产生异常
	assert 断言
		当条件不满足时，抛出AssertionError类型的错误并进入异常状态

day15笔记：
	
迭代器Iterator
	什么是迭代器
		迭代器是访问可迭代对象的工具
		迭代器是指用iter(obj)函数返回的对象(实例)
		迭代器可以用next(it)函数获取可迭代对象的数据
迭代器函数iter和next
	iter(iterable)从可迭代对象中返回一个迭代器，iterable 必须能提供一个迭代器的对象
	next(iterator)从迭代器iterator中获取下一个记录，如果无法获取下一条记录，则触发StopIterator异常

	说明：
		1.迭代器只能往前取值，不能后退
		2.用iter函数可以返回一个可迭代对象的迭代器
	示例：
		L=[1,3,5,7]
		it = iter(L)#让L提供一个能访问自己的迭代器
		next(it)  #1  从迭代器中取值，让迭代器去获取L中的一个元素
		next(it)  #3
		next(it)  #5
		next(it)  #7
		next(it)  #StopIteration异常
		it = range(1,10,3)
		next(it)  #1
		next(it)  #4
		next(it)  #7
		next(it)  #StopIteration异常

迭代器的用途
	用迭代器可以依次访问可迭代对象的数据
	示例：
		L=[2,3,5,7]
		for x in L:
			print(x)
		#一下用迭代器来访问列表中的元素
		L=[2,3,5,7]
		it = iter(L)#先拿到迭代器用iter绑定
		while True:
			x=next(it)
			print(x) #2,3,5,7

生成器Generator
	什么是生成器
	生成器是能够动态提供数据的对象，生成器对象也是可迭代对象(实例)
	生成器有两种
		生成器函数
		生成器表达式
	生成器函数的定义：
		含有yield语句的函数是生成器函数，此函数被调用将返回一个生成器对象
			yield翻译为产生(或生成)
	yield语句
		语法：
			yield 表达式
		说明：
			yield 用于def 函数中，目的是将此函数作为生成器函数使用
			yield 用来生成数据，共迭代器和next(it)函数使用
		示例见：
			yield.py

	生成器函数说明：
		生成器函数的调用将返回一个生产器对象，生成器对象是一个可迭代对象，通常用来动态生成数据
		生成器函数调用return语句会触发一个StopIterator异常

生成器表达式：
	语法：
		(表达式 for 变量 in 可迭代对象 [if 真值表达式])
	作用：
		用推导式形式创建一个新的生成器
	说明：
		if 语句可以省略
	示例：
		gen=(x**2 for x in range(1,5))
		it = iter(gen)
		print(next(it))	#1
		print(next(it))	#4
		print(next(it))	#9
		print(next(it))	#16
		print(next(it))	#StopIteration

	生成器表达式和列表推导式的区别：
		示例见：
			gen_vs_list_comprehension.py
		生成器表达式是现用现生成，列表推导式是一次性生成静态数据

迭代工具函数：
	作用是生成一个个性化的可迭代对象

函数：
	zip(iter1[,iter2[....]])
	作用：
		返回一个zip对象，此对象用于生成元组，此元组每个数据来源于参数中的可迭代对象，当最小的可迭代对象不在提供数据时迭代结束
	enumerate(iterable[,start])
		生成带索引的枚举对象，返回的迭代类型为索引-值对(index-value)对，
		默认索引从零开始们也可以用start指定

	zip示例：
		numbers=[10086,10000,10010,95588]
		names=['中国移动','中国电信','中国联通']
		for t in zip(numbers,names):
		print(t)
		#(10086, '中国移动')
		#(10000, '中国电信')
		#(10010, '中国联通')
		for No,number,name in zip(range(1,10),
								   numbers,
								   names):
			print('序号',No,name,'的客服电话是:',numbers)
			#序号 1 中国移动 的客服电话是: 10086
			#序号 2 中国电信 的客服电话是: 10000
			#序号 3 中国联通 的客服电话是: 10010
			
序列的种类：
	字符串 str
	列表 list
	元组 tuple
	字节串 bytes
	字节数组 bytearray

字节串和字节数组

字节串(也叫字节序列) bytes
	作用：
		存储以字节为单位的数据	
		字节串是不可变的字节序列

字节：
	字节是0-255之间的整数，字节是数据传输和数据存储的基本单位
		(例如中国移动的流量...，文件大小等)

创建空字符串的字面值
	b''
	b""
	b""""""
	b''''''
创建非空的字节串的字面值
	b'ABCD'
	b"ABCD"
	b'\x41\x42'
字节串的构造函数：
	bytes() #生成一个字的字节串，等同于b''
	bytes(整型可迭代对象) 用可迭代对象创建一个字节串
	bytes(整数n) 生成n个值为0的字节串
	bytes(字符串，encoding='utf-8')
	用字符串的转换编码生成一个字节串
示例：
	b=bytes()
	b=bytes(range(65,90))
	b=bytes(10)
	b=bytes('hello','utf-8')
	b=bytes('中文','utf-8')

bytes的运算：
	与其他序列的运算规则完全相同
	+ += * *=
	< <= > >= == !=
	in / not in 
	索引和切片

bytes与str的区别
	bytes存储字节(0-255)
	str存储字符(用来表示文字信息，值为0-65535或更大)

bytes与str转换
		编码(encode)
	str  ----------->bytes
	 b=s.encode(encoding='utf-8')
		解码(decode)
	bytes --------> str
	 s=b.decode(encoding='utf-8')

序列：
	str(不可变)
	list(可变)----------->tuple(不可变)
	bytearray(可变)------>bytes(不可变)

字节数字 bytearray
	可变的字节序列
构造函数：
	bytearray() #生成一个字的字节串，等同于b''
	bytearray(整型可迭代对象) 用可迭代对象创建一个字节串
	bytearray(整数n) 生成n个值为0的字节串
	bytearray(字符串，encoding='utf-8')
	用字符串的转换编码生成一个字节串

运算和字节串完全相同
	+ += * *=
	< <= > >= == !=
	in / not in 
	索引和切片

	*字节数组支持索引和切片赋值(重要)
	bytearray的方法：
		见文档









