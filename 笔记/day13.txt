day12回顾：
	函数装饰器
		原理：
			用装饰器函数的返回值改变原函数名变量的绑定关系
	示例1：
	def mydeco(fn):
		return None

	@mydeco
	def f1():#f1 = mydeco(f1)  #f1=None
		pass

	示例2：
	def mydeco(fn):
		def fx():
			print('---------')
			fn()
			print('================')
		return fx  #返回给被装饰函数的变量名
	@mydeco
	def myf1():
		print('hello')

	myf1()

def f1(a,*args,b,**kwargs):
	return a+b
	#f1.__name__ = 'f1'

f1=lamdba a,*args,b,**kwargs:a+b
	#f1.__name__ = '<lamdba>'

__name__属性
文档字符串
	记录在函数的__doc__属性
	>>>help(函数名)

模块 module
	导入语句：
		import 语句
			import math 把模块整体导入
		from import 语句
		from import * 语句

dir()
help()
模块分为四类
	内置模块
	标准库模块
	第三方模块
	用户自定义模块
内置模块：
	数学模块
	时间模块

day13笔记
系统模块sys
	运行时系统相关的信息
文档参见：
	python_base_docs_html/sys.html

用户自定义模块
	要求：
		模块名以'.py'结尾
		模块名必须是标识符的命名规则
		避免名称和内键模块冲突
	导入方式：
		import语句
		from import 语句
		from import *语句
	示例见：
		mymod.py 和 test_mymod.py

import 语句的搜索路径顺序
	1.索引内建模块 builtin
	2.搜索程序的运行时的路径(当前路径)
	3.sys.path提供的路径
	4.sys.path提供的路径
		两种方法让用户自定义模块被导入：
			1）将模块安装(复制)到sys.path提供的路径
			2）在运行程序时，在sys.path里添加自定义路径 

模块的加载过程：
	在模块导入时，模块的所有语句都会执行
	如果一个模块已经被导入，则再次导入时不会重新执行模块内的语句

模块的重新加载：
	import mymod
	import imp
	imp.reload(mymod)
模块被导入和执行的过程
	1.先搜索相关路径找模块文件(.py)
	2.判断是否有此模块对应的.pyc，如果pyc文件存在且比.py文件新则直接加载.pyc文件
	3.否则用模块名.py文件生成.pyc并加载执行

模块的编译
			编译		解释执行
	mymod.py--->mymod.pyc------>python3

模块的属性：
	模块的文档字符串
		模块内的第一次没有赋值给任何变量的字符串为模块的文档字符串
		模块内的文档字符串就绑定模块的__doc__属性上

	__doc__属性 用来绑定文档字符串

	__file__属性 用来绑定此模块对应的文件路径

	__name__属性 
		作用：
			1.用来记录模块自身的名字
			2.用来判断是否为主模块
				(注：主模块是指程序最先被python3执行的模块)
		说明：
			当此模块为主模块运行时，__name__的值为'__main__'
			当此模块部位主模块时，__name__绑定模块的名字

模块的__all__列表：
	模块中的__all__列表必须是一个字符串列表
	作用：
		当用from mymod import *
		导入时，只导入__all__列表内的属性

	示例见：
		mymod2.py

模块的隐藏属性：
	模块中以'_'开头的属性，在from xxx import * 导入时将不被导入，通常称这些属性为隐藏属性

随机模块：
	文档参见：
		python_base_docs_html/random.html

包(模块包) Package
	包的定义
		包是将模块以文件夹的组织形式进行分组管理的方法
	作用：
		将一系列模块进行分类管理，有利于防止命名冲突
		可以在需要时加载一个或部分模块而不是全部模块
	包示例：
		mypack/
			__init__.py
			menu.py
			games/
				__init__.py
				contra.py
				supermario.py
				tanks.py
			office/
				__init__.py
				word.py
				excel.py

	包内的__init__.py文件
		__init__.py是常规包内必须存在的文件
		__init__.py文件会在包加载时被自动调用
		作用：
			编写此包的内容
			编写包的文档字符串

包的导入：
	负责类似于模块的导入规则
	import 包名[as 包新名]
	import 包名.模块名[as 包新名]
	import 包名.子包名.模块名[as 包新名]
	...
	from 包名 import 模块名[as 模块新名]
	from 包名.子包名 import 模块名[as 模块新名]
	from 包名.子包名.模块名 import 属性名[as 属性新名]
	...
	from 包名 import *
	from 包名.模块名 import *
	...

import 语句搜索包的路径顺序
	1.搜索程序运行时的路径(当前路径)
	2.sys.path提供的路径
                                                        
__init__.py内的__all__列表
	作用：
		用来记录此包中有哪些包名或模块名需要导入
		当用from 包 import * 语句导入模块时，只查找__all__列表中所以的模块或子包
	说明：
		__all__列表只有在from xxx import * 导入时起作用
	示例见：
		mypack/games/__init__.py

包的相对导入：
	包的相对导入是指包内模块的相互导入
	语法：
		from 相对路径包或模块名 import 属性或模块名
		或
		from 相对路径包或模块名 import *
		相对路径
			在from和import键可以用相对路径
			. 代表当前目录
			..代表上一级目录
			....代表上二级目录
			....以此类推
		注：
			相对导入不能超出包的外部
	示例见：
		mypack/games/contra.py 内的gameover函数



































