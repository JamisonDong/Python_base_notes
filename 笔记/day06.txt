列表的in / not in 运算符：
	判断一个值是否在与列表中，如果存在返回True，否则返回False

列表的索引操作
	语法：
		列表[整数表达式]
	用法：
		与字符串索引的用法相同（分为正向索引和反向索引）
	示例：
		x=[1,3,5,7]
		print(x[1])  #3
		print(x[-1]) #7

列表的索引赋值：
	列表是可变的，可以通过索引赋值改变列表的元素
	语法：
		列表[整数表达式] = 表达式
	作用：
		改变列表中索引的绑定关系
	示例：
		x=[1,2,3,4]
		x[2]=3.14 #改变了第三个元素的赋值

列表的切片：
	列表[:]
	列表[::]
	列表的而且切片取值返回一个新的列表，规则等同于字符串切片规则

	示例：
		x=[1,2,3,4,5,6,7,8]
		x[::2]  	#1,3,5,7
		y=x[::3] 	#y=2,5,8

	列表的切片赋值：
		作用：
			可以改变元列表的数据排列，可以插入和修改数据
			可以用切片改变列表的对应元素的值	
		语法：
			列表[切片] = 可迭代对象
		说明：
			切片赋值的赋值运算符(=)的右侧必须是一个可迭代对象
		示例：
			L = [2, 3, 4]

			L[0:1] = [1.1, 2.2] #L = [1.1, 2.2, 3, 4]

			L[2:] = [3.3,4.4,5.5]  #L=[1.1,2.2,3.3,4.4,5.5]

			L[:] = [3,4]  #L=[3,4]

			L[0:0]=[1,2]  #L=[1,2,3,4]   实现插入操作

			L=[3,4]
			l[1:1]=[3.14]  #L=[3,3.14,4]

			L=[3,4]
			L[2:2]=[5,6]   #L=[3,4,5,6]

			L=[2,3,4] 
			L[1:2]  ='ABC'  #L=[2,'A','B','C',4]

			L=[2,3,7]
			L[1:2]=range(3,7)  #L=[2,3,4,5,6,7]

切片注意事项：
	对于步长不等于1的切片赋值，赋值运算符的左侧的可迭代对象提供元素的个数一定要等于切片切出的段数
	示例：
		L=[1,2,3,4,5,6,7,8]
		L[1::2]='ABCD'   	#True
		L[1::2]='ABCCDEF'  	#False

del语句用于删除列表的元素
	语法：
		del 列表[索引]
			如：del L[0]
		del 列表[切片]
			如：del L[1::2]

python3中常用于序列的函数
	len(s) 	返回序列的长度
	max(x)	返回序列的最大值元素
	min(x)	返回序列的最小值元素
	sum(x)	返回序列中的所有元素的和（元素必须是数值类型）
	any(x)	真值测试，如果列表中其中一个值为真值则范湖True
	all(x)	真值测试，如果列表中所有值为真值则返回True

	示例：
		L=[3,1,9,7,5]
		print(len(L)) #5
		print(max(L)) #9
		print(min(L)) #1
		print(sum(L)) #25

python3中常用的列表方法(method)
	详见： >>>help(list)

深拷贝和浅拷贝

浅拷贝 shallow copy
	浅拷贝是指在复制过程中，指复制一层变量，不会复制深层变量绑定的对象的复制过程
	示意：
		L=[3.1,3.2]
		L1=[1,2,L]
		L2=L1.copy()  #浅拷贝
		print(L1)	#[1,2,[3.1,3.2]]
		print(L2)	#[1,2,[3.1,3.2]]
		L2[2][0] = 3.14
		print(L1)  	#[1,2,[3.14,3.2]]
		print(L2) 	#[1,2,[3.14,3.2]]

深拷贝 deep copy
	复制对象及对象关联的对象一起复制的过程叫深拷贝
		示意代码：
		import copy #导入复制模块
		L=[3.1,3.2]
		L1=[1,2,L]
		L2=L1.deepcopy()  #深拷贝
		print(L1)	#[1,2,[3.1,3.2]]
		print(L2)	#[1,2,[3.1,3.2]]
		L2[2][0] = 3.14
		print(L1)  	#[1,2,[3.1,3.2]] #<<<L1不变
		print(L2) 	#[1,2,[3.14,3.2]] #<<<L2变
列表和字符串比较：
	1.都是序列，有先后顺序关系，有相同的运算操作
	2.列表是可变的，字符串是不可变的
	3.列表可以存任意类型的数据，字符串只能存字符

字符串的文本解析方法：
	S.split(sep=None) 将字符串，使用sep作用分隔符分割S字符串，返回分割后的字符串列表，当不给定参数时，用空白字符作为分隔符分割

	S.join(iterable)
	用可迭代对象中的字符串，返回一个中间用S进行分割的字符串

	示例：
		s='Beijing is capital'
		L=s.split(' ')		#L=['Beijing','is','capital']

		L=['aaa','bbbb','ccccc']
		'$'.join(L) 	#生成'aaa$bbbb$ccccc'

列表推导式 list comprehension
	列表推导式是用可迭代对象创建列表的表达式
	作用：
		用简易方法生成列表
	语法：
		[表达式 for 变量 in 可迭代对象]
		或
		[表达式 for 变量 in 可迭代对象 if 真值表达式]
	示例：
		#生成一个数值为1~9的平方的列表
		#[1,4,9,16,.... 81]
		#不用推导式：
		L=[]
		for i in range(1,10):
			L.append(i**2)
		#推导式实现
		L = [i**2for i in range(1,10)]

	用列表推导式生成1-100以内奇数的列表
		结果是：[1,3,5,7，...,99]
		L=[i for i in range(1,101) if i%2==1]
			print(L)

列表推导式的嵌套
	语法：
		[表达式 for 变量1 in 可迭代对象1 if 真值表达式1
			for 变量2 in 可迭代对象2 if 真值表达式2 ...]

	示例：
		将列表[10,20,30]中的元素与列表[1,2,3]元素分别相加，将得到的元素放在一个列表中

		L=[x + y 
			for x in [10,20,30]
				for y in [1,2,3] ]
		print(L) #[11,12,13,21,22,23,31,32,33]





练习：
	1.有一些数存在列表中，如：
	L=[1,3,2,1,6,4,2,....,98,82]
	1）将列表L中出现的数字醋与另一个列表L2中
		要求：
			重复出现多次的数字只在L2中保留一份（去重）
	2）将列表中出现两次的数字存于L3中（在L3中保留一份）
	2.计算除100以内的素数，将这些素数存于列表中，最后打印出列表中的这些素数
	3.生成前40个斐波那契数(Fibonacci)
		1 1 2 3 5 8 13 21
		要求将这些整数存于列表L中，最后打印这些数
		（斐波那契的前两个是1,1之后是前两个数的和）
























