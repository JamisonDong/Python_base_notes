day15回顾：
	
迭代器
	iter(iterable) #返回迭代器
	next(iterator) #返回可迭代对象提供的数据，当没有数据时以StopIteration异常通知

生成器：
	两种：
		生成器函数
		生成器表达式

	生成器函数：
		def 函数():
			#语句内部有
			yield语句
	gen=myyield()
	it=iter(gen)
	next(it) 才让myyield()函数执行，并遇到yield语句
	生成器表达式：
	(x**2 for x in range(10) if xxx)
迭代工具函数:
	zip(iter1,*iterable)
	enumerate(iterable,start=0)
字节串bytes(不可变)		/	字节数组 bytearray(可变)
	b'',bytes()			/	bytearray(b''),bytearray()
	b'abc',bytes(b'abc')/	bytearray(b'abc')
	bytes(10)     		/	bytearray(10)
	bytes('abc','utf-8')/	bytearray('abc','utf-8')
	bytes(range(65,90))	/	bytearray(range(65,90))

day16笔记：


文件 File
	什么是文件
		文件是用于数据存储得到单位
		文件通常用来长期存储数据
		文件中的数据是以字节为单位进行存储的
文件的操作流程：
	1.打开文件
	2.读/写文件
	3.关闭文件
		注：任何操作系统，一个应用程序同时打开文件的数量有最大限制		
文件的打开函数：
	open(file,mode='rt')用于打开一个文件，返回此文件对应的文件流对象，如果打开失败则触发OSError错误
文件的关闭方法：
	F.close() #关闭文件，释放系统资源

	示例见：
		file_open.py
文本文件的操作：
	文本文件的模式字符 't'
	说明：
		1.对文本文件的读写需要用字符串str进行读取和写入数据
		2.默认文件中的存储都是字符(文字)数据，在读写中自动进行编码转换操作
		3.以行为单位分隔，在python内统一用'\n'用作换行符进行分隔
	各操作系统的换行符：
		Linux换行符：'\n'
		Windows换行符：'\r\n'
		旧的Macintosh换行符：'\r'
		新的Mac OS换行符：'\n'
文件流对象的常用方法见：
	python_base_docs_html/文件.heml

文本文件的读方法：
	F.readline()
	F.readlines()
	F.read([字符数或字节数])
文本文件的写方法：
	模式字符串：'w'/'x'/'a'
	F.write(字符串)
	F.writeline(字符串列表)
	示例见：
		file_write_text.py

文件的迭代读取
	文件流对象是可迭代对象，迭代过程将以换行符'\n'作为分隔符依此获取
	示例：
		f=open('mynote.txt','rt')
		for line in f:
			print(line)

标准输入输出文件：
	sys.stdin 标准输入文件(默认为键盘设备)
		ctrl + d 快捷键是让键盘输入文件结束符
	sys.stdout 标准输出文件(默认为屏幕终端)
	sys.stderr 标准错误输出文件(默认为屏幕终端)
		模块名: sys
	说明：
	1.标准文件不需要打开和关闭就可以使用
	2.每一个python程序启动后都会有以上三个文件供我们使用

二进制文件操作：
	模式字符：'b'
	默认文件中存储的都是以字节为单位的数据，通常有人为的格式
	对二进制文件的读写需要用字节串(bytes)进行操作
常用的操作方法：
	F.read([字节数/字节符])
		对于文本文件，F.read()返回类型为字符串str
		对于二进制文件，Fread()返回类型为字节串bytes
	F.write()
		同上，对于二进制文件，写入的数据为字节串bytes或bytearray

F.tell()方法
	返回当前文件流的读写位置(从0开始，以字节为单位)

F.seek()方法
	设置文件的读写位置
	格式：
		F.seek(偏移量，whence=相对位置)
			偏移量
				大于零代表项文件为方向移动
				小于零代表向文件头方向移动
			相对位置
				0代表从文件头开始偏移
				1代表从当前位置开始偏移
				2代表从文件尾开始偏移
	示例见：
		seek.py
汉字编码(只讲两种)
	十个汉字占多少个字节？
		20个(GBK编码)
		30个(UTF-8编码)

国标编码：
	GB18030(二字节或四字节编码)
	GBK(二字节编码21003个字)
	GB2312(二字节编码6763个字)
	(Windows上常用)


国际标准：
	UNICODE <--->UTF-8
	(Linux/Mac OS X /IOS / Android常用)
UTF-8(8-bit Unicode Transformation Format)

python的编码(encode)字符串
	'gb2312'
	'gbk'
	'gb18030'
	'utf-8'
	'ascii'

编码注释：
	在源文件中第一行或第二行写入如下内容为编码注释
	#-*- coding:gbk -*-
	#设置源文件编码格式为:gbk
	或
	#-*- coding:utf-8 -*-
	#设置源文件编码格式为:utf-8
作用：
	告诉解释执行器，当前的.py文件的编码格式是什么









