复合赋值运算符：
运算符 说明
y += x 作用等同于 y = y + x
y *= x  作用等同于 y = y * x
y -= x  作用等同于 y = y - x
y /= x  作用等同于 y = y / x
y //= x  作用等同于 y = y // x
y **= x  作用等同于 y = y ** x
y %= x  作用等同于 y = y % x

比较运算符：
< 小于
<= 小于等于
> 大于
>= 大于等于
== 等于
!= 不等于
语法：
左表达式 > 右表达式
说明： 
比较运算符通常返回布尔类型的值
示例：
100 < 200  #Ture
100 >= 200 #False
1 + 5 == 2 + 4  #True
0 <= 100 <= 200 #Ture

数址对象的构造（创建）函数
float（obj）
把字符串或数字转换为浮点数，如果不给出参数，则返回0.0

int（x，base=10）
或
int(x=0)
把数字或字符串转换为整数，如果不给出参数则返回0
base为进制转换的底数

complex(r=0.0,i=0.0)
把数字创建一个复数（实部为r，虚部为i）

bool（x）
用x创建一个布尔值（True/False）
bool（x）返回假值的情况
bool（x）用于显示获取x的布尔值
假值情况：
None 空值
False 布尔价值
0  0.0  0j  所有数字零
-------以后下面会讲------
''  空字符串
[] 空列表
() 空元组
{} 空字典
set() 空集合
... #一切空的容器对象bool（x）取值都为False

函数调用：
函数名：（传参列表）
说明： 
函数调用表达式，一定会返回一个对象的引用关系

预置数值型函数：
abs（x） 
取x的绝对值

round(number[,ndigits])对数值进行近似的四舍五入，nidigits是小数向右 
取整的位数，复数表示向左取整

pow(x,u,z=None)相当于 x ** y 或 x ** y % z

help()
查看函数帮助
>>>help(函数名)

小结：
id(x)  返回整数x对象的地址
float(x)
int(x,base=10)
complex(r=0,i=0)
bool(x)

基本输入函数：input
input('提示字符串') 返回用户输入的字符串('提示字符串'可以为空)

基本输出函数： print
作用：
将一系列的值以字符串形式输出到标准设备上，默认为终端
格式：
print(value,...sep=' ',end='\n')
选项的关键字参数
sep：两个值之间的分隔符，默认为一个空格
end：输出完毕后在末尾追加一个字符串，默认换行符'\n'

语句 statement
语句由一些表达式组成，通常一条语句可以独立的执行来完成部分事情并形成结果
一条语句建议写在一行内
多行语句写在一行内需要用分号(;)分开
示例： 
x = 100
y = 200
print(x + y)
#写在一行为:
x = 100; y = 200; print(x + y)

显示换行
折行符  \
折行符必须放在一行的末尾，来示意解释执行器的下一行也是本行的语句

隐式换行
所有括号的内容换行，成为隐式换行
() [] {}

if 语句
问题：
有两条语句
print('是偶数')
print('是奇数')
如何只让其中一条语句执行并打印出结果？
作用：
让程序根据条件选择性的执行某条语句或某些语句
语法：
if 真值表达式1：
    语句块1
elif 真值表达式2：
语句块2
elif 真值表达式3：
语句块3
...
else：
语句块4
说明：
elif子句可以有0个，1个或多个
else子句可以有0个或1个，且只能放在if语句的最后

if语句的真值表达式
if 100：
print('zhenzhi')
等同于
if bool(100):
print('zhenzhi')

if语句的嵌套：
if语句本身是由多条子句组成的一条复合语句
if语句可以作为语句嵌套到另一个语句的内部

条件表达式：
语法：
表达式1 if 真值表达式2  else 表达式2
作用：
根据真值表达式的取值（Ture/False）
来决定执行表达式1或者表达式2并返回结果
示例：if_express.py

pass语句
作用：
通常用来填充语法空白
语法：
pass

布尔运算：
运算符：
not and or
布尔非操作 not
语法：
not x
作用：
对x进行布尔取非，如bool（x）
为Ture，则返回False，否则返回Ture
示例：
not Ture   #返回False
not False  #返回Ture
not 200>100  #返回Ture
布尔与操作 and
语法：
x and y
注：x，y代表表达式
作用：
优先返回假值对象
当x的布尔值为False时，返回x，否则返回y
示例：
True and True    #True
True and False   #False
False and True   #False
False and False  #False
布尔或操作 or
语法：
x or y
注：x，y代表表达式
作用：
优先返回真值对象
当x的布尔值为Ture时，返回x，否则返回y
示例：
True or True    #True
True or False   #True
False or True   #True
False or False  #False

正负号运算符
+（正号）  -（负号）

一元运算符
语法：
+  表达式
-  表达式
示例：
a = 5
b = -a
c = +a


小结：
运算符：
< <= > >= == !=
not and or 
+ -
函数：
id 
abs
round
pow
float
int
complex
bool
input
print
语句：
if 语句
pass语句
表达式：
if_else 条件表达式

明天内容：
字符串：str