回顾：
字符串：
记录文字信息，整数编码（Unicode）

空字符串：
''
""
''''''
""""""
\r \t \n \f \b \v
\' \" \\ 
\xXX 
\uXXXX
\Uxxxxxxxx
ASCII 编码（0~127）
Unicode 编码（0~127~65535）

r原始字符串
r\'a\b\c\d' 八个字符
运算符：
+ * += *=
> >= < <= == !=
in /not in 
序列
索引 
得到一个元素
切片操作
从字符串中拿出以部分字符，重新组成字符串
函数：
len(x)
max(x)
min(x)
ord(c) 返回编码值
chr(i) 用编码值返回字符
bin(i)
oct(i)
hex(i)
str(i)
day05笔记
字符串的格式化表达式
作用：
生活一定格式的字符串
运算符：
%
语法格式：
格式字符串 % 参数值
或
格式字符串 %(参数值1，参数值2，...)
说明:
% 左侧为格式字符串
% 右侧为参数值，当有多个参数值时用括号()括起来，并用逗号(,)分隔
格式化字符串中以%为开头的占位符，占位符的位置将用数值替换
示例：
fmt="name: %s,age:%d"
s=fmt%('djc',35)
print(s)  #name:djc,age:35
格式化字符串中的占位符和类型码
%s    字符串，使用str(x)将x转化为字符串
%r 字符串，使用repr(x)将x转化为字符串
%c  整数转为单个字符
%d 转为十进制整数
%o 转为八进制整数
%x 转为十六进制整数（字符a-f小写）
%X 转为十六进制整数（字符A-F大写）
%e 指数型浮点数（e小写），如2.9e+10
%E 指数型浮点数（E大写），如2.9E+10
%f,%F 浮点数（小数形式）
%g,%G 十进制浮点数或指数浮点自动转换
%% 等同于一个%字符

占位符和类型码之间的格式化语法：
% [- + 0 宽度.精度] 类型码
- ：左对齐
+ ：显示正号
0 ：左侧空白位置补零
宽度：整个字符串的字符个数
精度：保留小数点后多少位（默认6位）

示例：
"%+10d" %123   #'      +123'
"%-10d"%123    #'123       '
"%10s" %'abc'  #'       abc'
"%-5s" %'abc'  #'abc  '
"%010d"%123    #'0000000123'
"%7.3f"%3.141592535897932  #'  3.141'
"%07.2f"%3.141592535897932 #'0003.14'

循环语句：
有两条循环语句
while语句：
作用：
根据有一定条件，重复执行一条语句或多条语句
语法：
while 真值表达式：
语句块1
else：
语句块2
说明：
1.先判断真值表达式，为True或False
2.如果为True，则执行语句块1，再回到第一步
3.如果为False，则执行语句块2，然后结束此while的执行
4.else子句部分可以省略（同if类似）
示例见：
while.py
while语句注意事项：
要控制循环真值表达式的值来防止死循环
通常用真值表达式内的循环变量来控制循环条件
通常在循环语句块内改变循环变量来控制循环次数和变量走向
while语句的嵌套
while语句本身是语句，和其他语句一样，可以嵌套到任何复合语句中
示意：
while 真值表达式1：
...
while真值表达式2：
...
else：
...
else:
...
示例：
打印1~20的整数打印到一行内
break 语句
作用：
用于循环语句(while，for语句)中，用来终止当前循环语句的执行
语法：
break
说明：
1.当break语句执行后，此循环语句break之后的语句将不在执行
2.break语句通常和if语句组合使用
3.break语句终止循环式else子句的语句将不会执行
4.break语句只能终止当前循环语句的执行，如果有循环嵌套是，不会跳出嵌套的外重循环
死循环
死循环是指条件一直成立的循环
死循环通常用break语句来终止循环
死循环的else子句永远不会执行
