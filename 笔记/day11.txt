day10回顾：
	作用域：
		四个作用域
			局部 
			外部嵌套函数作用域
			全局作用域
			内建函数作用域
	全局变量
	globals() 返回全局变量的字典
	局部变量
	locals() 返回当前作用于内局部变量的字典
函数变量
	def 函数名():
		pass
	1.函数可以传入另一个函数
	2.函数可以返回另一个函数

函数的嵌套定义：
	def f1():
		def f2():
			def f3():
				pass

globals 语句
	声明一个变量在全局作用域内

nonlocal 语句
	声明当前变量为外部嵌套函数的变量


eval() 可以把字符串当成表达式
exec() 可以把字符串当成程序

def 语句
lambda表达式

day11笔记

函数是编程
	是指用一系列函数解决问题

	示例：
		求 1+2+3+4+...+100的和

函数的可重入性：
	当一个函数的输入一定，则输出必然一定的函数成为可重入函数
	说明：
		可重入函数内一定不会访问除局部变量以外的变量

	示例：
		#可重入函数：
			def myadd(x,y):
				return x+y
			print(myadd(100,200)) #300
		#不可重入函数：
			y=200
			def myadd(x):
				return x+y
			print(myadd(100))  #300
			y=300
			print(myadd(100))  #400

高阶函数 High Order Function
	什么是高阶函数：
		满足下列条件中的一个即为高阶函数
		1.函数接收一个或多个函数作为参数传入
		2.函数返回一个函数
	python内置的高阶函数：
	  map,filter,sorted

	map函数：
		map(func,*iterable) 返回一个可迭代对象，此可迭代对象用函数func对可迭代对象iterable中的每一个元素作为参数计算后得到新的数据

		示例见：
			mymap.py
			def mypower2(x):
			    return x**2
			s = 0
			for x in map(mypower2, range(1, 10)):
			    s += x
			print(s)
			def mypower3(x):
			    return x**3
			s = sum(map(mypower3, range(1, 10)))
			print(s)
			print(sum(map(lambda x:x**2,range(1,10))))

			# 生成一个可迭代对象，提供：
			#     1**4,2**3,3**2,4**1
			def mypow(x,y):
			    return x**y
			for i in map(mypow,[1,2,3,4],(4,3,2,1)):
			    print(i)

	filter函数
	filter(function,iterable)
	作用：
		1.筛选可迭代对象iterable中的数据，返回一个可迭代对象，此可迭代对象只返回iterable中附和条件的数据
		2.function将对iterable中提供的每个数据进行求布尔值，如果结果为True则保留，返回False则丢弃此数据

	示例见：
		myfilter.py

	sorted 函数
		作用：
			将原可迭代对象的数据进行排序，生成排序后的列表
		函数参数格式：
			sorted(iterable,key=None,reverse=False)
		说明：
			iterable 可迭代对象
			key 函数式用来提供一个值，这个值将作为排序的依据，如果不给出key函数，则用原数据的值进行比较和排序
			reverse 标志用来设置是否降序排序

		示例：
			L=[5,-2,-4,0,3,1]
			L2=sorted(L)  				#[-4,-2,0,1,3,5]
			L3=sorted(L,reverse=True)   #[5,3,1,0,-2,-4]
			L4=sorted(L,key=abs) 		#[0,1,-2,3,-4,5] 按绝对值来排
			names=['Tom','Jerry','Spike','Tyke']

递归函数 recursion
	递归是指 函数直接或间接的调用自身

	递归示例：
		#函数直接调用自身
		def f():
			f()  #直接调用自身
		f()
		print('递归完成')

		#函数间接调用自身
		def fa():
			fb()
		def fb():
			fa()
		fa()
		print('递归完成')

	递归说明：
		递归一定要控制递归的层数，当符合某一条件时要终止递归调用，几乎所有的递归都能用while循环来代替
	递归的优缺点：
		优点：
			可以把问题简单化，让思路变得清晰，代码更简洁
		缺点：
			递归因系统环境影响大，当递归深度太大时，可能会得到不可预知的结果
递归调用分两个阶段：
	递推阶段：
		从原问题出发，按递归公式递推，从未知到已知，最终达到递归终止条件
	回归阶段：
		按递归终止条件求出结果，逆向逐步代入递归公式，回归到原问题求解

	示例：
		限制递归层数的示例：
		见：
			recursion2.py

闭包 closure
	什么是闭包
		闭包是指引用了此函数外部变量的函数
	如果一个内嵌函数访问了外部嵌套函数的变量，则这个内嵌函数就是闭包

	闭包必须满足三个条件
		1.必须有一个内嵌函数
		2.内嵌函数必须引用外部函数中的变量
		3.外部函数返回值必须是内嵌函数
	示例见：
		closure.py
		def make_power(y):
		    def fn(x):
		        return x**y
		    return fn

		pow2=make_power(2)
		print('５的平方是:',pow2(5))


    print('+-----------------------------------+')
    print('|1)  添加学生信息                   |')
    print('|2)  显示学生信息                   |')
    print('|3)  删除学生信息                   |')
    print('|4)  修改学生信息                   |')
    print('|5)  按学生成绩高－低显示学生信息   |')
    print('|6)  按学生成绩低－高显示学生信息   |')
    print('|7)  按学生年龄高－低显示学生信息   |')
    print('|8)  按学生年龄低－高显示学生信息   |')
    print('|q)  退出                           |')
    print('+-----------------------------------+')
    
  































